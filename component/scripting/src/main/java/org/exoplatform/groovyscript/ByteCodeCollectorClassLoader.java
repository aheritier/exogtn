/*
 * Copyright (C) 2010 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.exoplatform.groovyscript;

import groovy.lang.GroovyClassLoader;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.control.CompilationUnit;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.codehaus.groovy.control.SourceUnit;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.HashMap;
import java.util.Map;

/**
 * A {@link GroovyClassLoader} extension that collects the bytecode generated by the GroovyClassLoader for its own purpose.
 * The generated bytecode is stored in the {@link #byteCodeMap} class.
 *
 * @author <a href="mailto:julien.viet@exoplatform.com">Julien Viet</a>
 * @version $Revision$
 */
class ByteCodeCollectorClassLoader extends GroovyClassLoader
{

   /** . */
   private final Map<String, byte[]> byteCodeMap = new HashMap<String,byte[]>();

   public ByteCodeCollectorClassLoader()
   {
   }

   public ByteCodeCollectorClassLoader(ClassLoader loader)
   {
      super(loader);
   }

   public ByteCodeCollectorClassLoader(GroovyClassLoader parent)
   {
      super(parent);
   }

   public ByteCodeCollectorClassLoader(ClassLoader parent, CompilerConfiguration config, boolean useConfigurationClasspath)
   {
      super(parent, config, useConfigurationClasspath);
   }

   public ByteCodeCollectorClassLoader(ClassLoader loader, CompilerConfiguration config)
   {
      super(loader, config);
   }

   public Map<String, byte[]> getByteCodeMap()
   {
      return byteCodeMap;
   }

   class ByteCodeCollector extends ClassCollector
   {
      ByteCodeCollector(InnerLoader cl, CompilationUnit unit, SourceUnit su)
      {
         super(cl, unit, su);
      }

      @Override
      protected Class createClass(byte[] code, ClassNode classNode)
      {
         byteCodeMap.put(classNode.getName(), code);
         return super.createClass(code, classNode);
      }
   }


   @Override
   protected ClassCollector createCollector(CompilationUnit unit, SourceUnit su)
   {
      InnerLoader loader = (InnerLoader) AccessController.doPrivileged(new PrivilegedAction() {
          public Object run() {
              return new InnerLoader(ByteCodeCollectorClassLoader.this);
          }
      });
      return new ByteCodeCollector(loader, unit, su);
   }
}
